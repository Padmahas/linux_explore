Run the container "getting-started"
docker run -dp 80:80 docker/getting-started

To build the new container with updated code.
docker build -t getting-started .

To see the id of running containers.
docker ps

To Stop the container
docker stop <the-container-id>

To Remove the container
docker rm <the-container-id>

Share the contaner over public repository
docker push <namespace>/getting-started
eg: docker push padmahasa/getting-started

Login to Docker Hub
docker login -u YOUR-USER-NAME
eg: docker login -u padmahasa

Create Docker tag
docker tag getting-started YOUR-USER-NAME/getting-started
eg: docker tag getting-started padmahasa/getting-started

Run image on a new instance
docker run -dp 3000:3000 YOUR-USER-NAME/getting-started

Execute command inside container
docker exec <container-id> cat /data.txt

----------------------------------------------------------------
Named Volume commands
----------------------------------------------------------------
Create a Volume
docker volume create VOLUME_NAME
eg: docker volume create todo-db

Start the container with mount volume
Start the todo app container, but add the -v flag to specify a volume mount. We will use the named volume and mount it to /etc/todos, which will capture all files created at the path
docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started

Get details of a volume like Mount point etc.
docker volume inspect VOLUME_NAME
docker volume inspect todo-db
-------------------------- ***** -------------------------------

----------------------------------------------------------------
Bind Volumes
----------------------------------------------------------------
Bind mount source code and start container. Make app directory (Node application) as working so all commands will run from "app" directory with "-w" option.
node:12-alpine is a base image to refer.
sh -c is the shell to use execute commnads (alpine node doesn't have bash shell to execute commands)
docker run -dp 3000:3000 \
     -w /app -v "$(pwd):/app" \
     node:12-alpine \
     sh -c "yarn install && yarn run dev"

-------------------------- ***** -------------------------------

Create the network
docker network create todo-app

Start a MySQL container and attach it to the network. We’re also going to define a few environment variables that the database will use to initialize the database (see the “Environment Variables” section in the MySQL Docker Hub listing).
docker run -d \
     --network todo-app --network-alias mysql \
     -v todo-mysql-data:/var/lib/mysql \
     -e MYSQL_ROOT_PASSWORD=secret \
     -e MYSQL_DATABASE=todos \
     mysql:5.7

Connect a container to the network which another container is running. In the below example, we are connecting to the network that "todo-app" is running on.
Start a new container using the nicolaka/netshoot image. Make sure to connect it to the same network
docker run -it --network todo-app nicolaka/netshoot

